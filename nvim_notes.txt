Lazy modules are saved to ~/.local/share/nvim/lazy/
<leader> is spacebar

Help
<leader> sh  - Search help
<leader> sk  - Search keybindings
:map  - Show currently mapped keys
:LspInfo  - Show LSP info

Navigation
C-f  -  Scroll forward one screen
C-b  -  Scroll backward one screen
C-d  -  Scroll forward half a screen
C-u  -  Scroll backward half a screen
M  - Move to middle of screen
f <char>  - Move to next occurrence of <char> (subsequent presses of 'f' move to next occurrence) (Flash)
F <char>  - Move to previous occurrence of <char> (subsequent presses of 'f' move to previous occurrence) (Flash)
^  - Move to first non-blank character of line
%  - Move to matching bracket, paren, or brace
*  - Move to next occurrence of word under cursor, or the highlighted text in visual mode
#  - Move to previous occurrence of word under cursor, or the highlighted text in visual mode
)  - Move forward one sentence
(  - Move backward one sentence
}  - Move forward one paragraph (i.e. move to the next blank line)
{  - Move backward one paragraph (i.e. move to the previous blank line)
w  - Move forward one word
b  - Move backward one word
e  - Move to end of word
ge  - Move to end of previous word
C-o  - Retrace movements backwards (go back to where you were before)
C-i  - Retrace movements forwards (go forward to where you were before)

Registers
<leader> s"  - Show registers
There are ten types of registers:
1. The unnamed register ""
2. 10 numbered registers "0 to "9
3. The small delete register "-
4. 26 named registers "a to "z or "A to "Z
5. Three read-only registers ":, "., "%
6. Alternate buffer register "#
7. The expression register "=
8. The selection registers "* and "+
9. The black hole register "_
10. Last search pattern register "/
:dis  - Show registers

Marks
<leader> sm  - Jump to mark / show marks
'a - 'z  - lowercase marks, valid within one file
'A - 'Z  - uppercase marks, also called file marks, valid between files
Lowercase marks can be used in combination with operators.  For example: "d't" deletes the lines from the cursor position to mark 't'. 
m{a-zA-Z}  - Set mark {a-zA-Z} at cursor position
'{a-z}  - Move to line containing mark {a-z}
`{a-z}  - Move to position where mark {a-z} was set
:marks  - List all the current marks
'.  - Move to last edited line
`.  - Move to last edited position
'[  - Move to start of last change
']  - Move to end of last change
''  - Move to position before last jump
``  - Move to position before last jump
'^  - Move to position where last insert started

File Navigation
<leader> sf  - Find files.
<leader> sg  - Grep (root dir).
<leader> si  - Grep (no-ignore, i.e. search all files)
<leader> we  - Toggle NeoTree workspace explorer (close with <c-w>q if focused)
<leader> wf  - Browse workspace files using Mini.files
<leader> sc  - Open telescope live grep with args. This allows you to add arguments to the underlying ripgrep command.
               For example: "_drm" -g 'CMakeLists.txt'
?  - Show keybindings (while in the NeoTree window)

Jumps
Return to the position before the latest jump with '' or ``.
:jumps  - List all the jumps
G  - Move to end of file
/  - Search forward
?  - Search backward
n  - Repeat search in same direction
N  - Repeat search in opposite direction
%  - Move to matching bracket, paren, or brace
L  - Move to last line of window
M  - Move to middle line of window
H  - Move to home line (top) of window
(  - Move backward one sentence
)  - Move forward one sentence
{  - Move backward one paragraph
}  - Move forward one paragraph
:s  - Open search and replace (searches in current buffer)
:%s  - Open search and replace (searches in all buffers)
C-o  - move backwards through jump list
C-i  - move forwards through jump list
<tab>  - move forwards through jump list
<leader> sj  - Show jumplist (Telescope)

Searching
/  - Search forward
?  - Search backward
C-r <register>  - Paste from register into search bar
n  - Repeat search in same direction
N  - Repeat search in opposite direction
<space> sg  - Grep in workspace
<leader> sw  - Grep word under cursor
<leader> sb  - Search open buffers (Telescope)
Find in files:
  1) <leader> sG  - Open live_grep (telescope)
  2) Start typing
  3) Realize that you need to scope to directory
  4) <Ctrl-f>
  5) Select directory
  6) Get returned to live_grep, scoped to the directory you selected and with your search args still populated
Find and Replace One Occurrence at a Time:
  1) Execute a regular search with /
  2) Use the keystroke cgn on the first result to replace it.
  3) Type n or N to go to the next result.
  4) Use . to replace the occurrence with the same replacement, or go to the next result if you want to keep it.
Search and replace with confirmation
  :%s/foo/bar/gc

During live grep:
<C-f>  - Set the file extension to grep in.
<C-l>  - Set the directory to grep in.

gn  - Select next search match (i.e. find next match and select it in visual mode)
gN  - Select previous search match
cgn  - Change next search match
dgn  - Delete next search match
ygn  - Yank next search match
gUgn  - Uppercase next search match

Editing
A  - append at end of line
I  - insert at beginning of line
J  - join lines
g~ {motion}  - switch case for text covered by motion
<leader> s" - Show registers
u  - undo
C-r  - redo
C-v - visual block mode
C-v [select column] S-i [insert text] ESC - insert text in column
S-v - visual line mode
dt{char}  - delete up to {char}
df{char}  - delete up to and including {char}
dT{char}  - delete back to {char}
dF{char}  - delete back to and including {char}
C-a  - increment number under cursor
C-x  - decrement number under cursor

Changes
g;  - go to older position in change list
g,  - go to newer position in change list

Code
K  - open hover
C-x C-o  - omnifunc (insert mode)
]h  - next hunk (diff)
[h  - prev hunk
]m  - next method start
]M  - next method end
[m  - prev method start
[M  - prev method end
gD  - goto declaration
gd  - goto definition
gr  - goto references
<leader> sg  - live grep of files in workspace
gcc  - comment line
<leader> cr  - switch between source and header file
gco  - Insert comment to the next line and enters INSERT mode
gcO  - Insert comment to the previous line and enters INSERT mode
gcA  - Insert comment to end of the current line and enters INSERT mode
<leader>cfs  - Format selection (visual mode)
<leader>sls  - Search symbols in the current buffer. <c-l> opens autocomplete menu to filter results by type of symbol you want to see. <c-n> and <c-p> scroll through the menu, and <c-y> accepts it.
<leader>cfl  - Format current line
<leader>cfb  - Format current buffer
<leader>cfd  - Format current diff
<leader>ct  - Toggle inlay hints

Trouble
<leader>xx  - Diagnostics (Trouble)
<leader>xX  - Buffer Diagnostics (Trouble)
<leader>cs  - Symbols (Trouble)
<leader>cl  - LSP Definitions / references / ... (Trouble)
<leader>xL  - Location List (Trouble)
<leader>xQ  - Quickfix List (Trouble)

Copilot
:Copilot panel  - open copilot panel to preview suggestions in a split window
:CopilotChat "message"  - send a message to the copilot chat about code in unnamed register ('y' command)
:CopilotChatExplain  - explains code in unnamed register ('y' command)
:CopilotChatFixDiagnostic  - fix diagnostic in current line
:CopilotChatInPlace "prompt"  - Run in-place chat session about code selected using visual mode.

Buffers
]b  - next buffer
[b  - previous buffer
<leader><space>  - switch buffer
:e  - reload file
:bd  - close current buffer (buffer delete)

Macros
q<register><commands>q  - record macro
:reg  - show registers
:reg <register>  - show contents of register
@<register>  - play macro

Windows
C-w s  - split window
C-w v  - split window vertically
C-w w  - switch to other window
C-w o  - close other windows
C-w q  - close window
C-h    - Move focus to the left window
C-l    - Move focus to the right window
C-j    - Move focus to the lower window
C-k    - Move focus to the upper window

Folding
za  - toggle fold
zR  - open all folds
zM  - close all folds

Git
<leader>cgsb  - Blame current line
<leader>cgst  - Toggle blame current line
<leader>cgsd  - Diff this
<leader>cgshs  - Stage hunk
<leader>cgshr  - Reset hunk
<leader>cgshu  - Undo stage hunk
]h  - Next hunk
[h  - Previous hunk
<leader>cgg  - LazyGit
:Gdiffsplit  - Open git diff in a split window
:diffget  - Get changes from the other window (while Gdiffsplit is open)

Textobjects
a  - around
i  - inside
Examples
vi)  - visually select inside parentheses
da]  - delete around square brackets
yib  - yank inside balanced ), ], or }
ciq  - change inside quotes ", ', or `
yi?  - yank inside user defined text object (asks for left and right edges)
dit  - delete inside tag (HTML/XML)
yaf  - yank around function call (i.e. includes function name and parentheses)
yif  - yank inside function call (i.e. only includes arguments)
daa  - delete around argument
dia  - delete in argument
g[   - move cursor to left edge of 'a' textobject
g]   - move cursor to right edge of 'a' textobject
an   - around next textobject
in   - inside next textobject
al   - around last textobject
il   - inside last textobject

Flash
s  - Flash jump.
S  - Flash Treesitter (normal mode). All parents of the Treesitter node under your cursor are highlighted with a label for quick selection of a specific Treesitter node. Use ; and , to increase/decrease the selection.
f{char} or F{char}  - Jump forward or backward to the [count]'th occurrence of {char} in the current line. The cursor is placed on {char} inclusive. Repeat motion with f, or undo motion with F. Can also use ; and ,
t{char} or T{char}  - Same as f{char} or F{char}, except the cursor is placed on {char} exclusive.
[operator]R  - Treesitter search. For example, yR will enter a flash search and then yank the selected treesitter node. dR would delete the selected node.
[operator]r  - Opens flash in remote mode. This is similar to R, but will return you to the original window/position.
               For example, yr will start yanking and open flash. Select a label to set the cursor position. Perform a motion, like iw or start flash Treesitter with S.
               The yank will be performed and the cursor will be returned to the original position.

Telescope
:Telescope notify  - view notification history
:Noice telescope  - view Noice message history (probably more useful than the above)
:Telescope resume  - resume the last telescope picker
:Telescope lsp_document_symbols  - list symbols in the current buffer
 <space>s"   - Search Registers
 <space>sc   - Live Grep (Args)
 <space>si   - Search Grep No-Ignore
 <space>sr   - Search Resume
 <space>s.   - Search Recent Files ("." for repeat)
 <space>sd   - Search Diagnostics
 <space>sj   - Search Jumplist
 <space>st   - Search Tree-sitter
 <space>s/   - Search / in Open Files
 <space>sf   - Search Files
 <space>sk   - Search Keymaps
 <space>su   - Search Autocommands
 <space>sa   - Search All Buffers
 <space>sg   - Search by Grep
 <space>sm   - Search Marks
 <space>sw   - Search current Word
 <space>sb   - Search Buffers
 <space>sh   - Search Help
 <space>sn   - Search Neovim files
 <space>sx   - Search Built-In Pickers
 <space>sld  - Definitions
 <space>sli  - Implementations
 <space>slr  - References for Word
 <space>sls  - Symbols in Document
 <space>slt  - Type Definitions for Word
 <space>slw  - Workspace Symbols


INSERT MODE
CTRL-R {register}  - Paste from register

:au  - Show autocommands
:Mason  - Open Mason window

Show all keys in global namespace
:lua for key,value in pairs(_G) do print(key) end

:messages  - Show history of command line messages.

Persistence
<leader>pr  - Restore last session

Kitty scrollback (https://github.com/mikesmithgh/kitty-scrollback.nvim)
In Kitty,
<C-S-h>  - Open scrollback in nvim
<Space>y  - Yank and close scrollback (when text is highlighted in visual mode).


 If you wish to know more about what's made available by the vim variable, :help lua-stdlib and :help lua-vim are the way to go.
 Alternatively, you can do :lua print(vim.inspect(vim)) to get a list of every module.
 API functions are documented under :help api-global.

To debug lsp issues, enable debug logging using the following commands, either in a config file or in the nvim command line (with :lua):
  vim.lsp.set_log_level("debug")
  vim.print(vim.inspect(vim.lsp.get_log_path()))
The rpc.send lines are what nvim sends to the lsp server, and the rpc.receive lines are what we receive from the lsp server.
